#!/user/bin/env node
//  Why this file? It removes all the create and start server code from
//  your server.js and let you focus only on the application logic part.
//  So you can require('./app') from external files and get the express
//  app that is not listening on any port (think unit tests and the like).

// Dotenv is a module that loads environment variables from a .env file into process.env.
require('dotenv').config();

const express = require('express');
// const cors = require('cors');
const app = require('../app');
// const app = express();


// app.use(cors());

//  From Heroku instructions
// https://devcenter.heroku.com/articles/heroku-postgresql#connecting-in-node-js
// *****************
const { Client } = require('pg');

const client = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: true,
});

client.connect();

client.query('SELECT * FROM citibike_rides LIMIT 1;', (err, res) => {
  if (err) throw err;
  for (let row of res.rows) {
    console.log(JSON.stringify(row));
  }
  client.end();
});

// *****************
// Not working here
app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


// Dynamic Port Binding
// Heroku sets its own PORT through an environment variable.
// "process.env.PORT" allows platform control the port by looking for
// this environment variable first, and falling back to 4000 if itâ€™s not set.
const PORT = process.env.PORT || 4000;

app.listen(PORT, () => {
  console.log(`Listening on port ${PORT}. Let's ride!`)
  console.log(`Database URL is: ${process.env.DATABASE_URL}.`)
  console.log(`Development or Production?: ${process.env.MODE}.`)
});
